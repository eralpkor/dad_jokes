{"version":3,"sources":["components/Joke.jsx","components/JokeList.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","JokeList","props","handleClick","setState","loading","getJokes","state","jokes","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","j","text","console","log","this","length","numJokesToGet","axios","get","headers","Accept","res","has","data","joke","push","id","uuidv4","votes","st","setItem","stringify","alert","delta","className","size","color","sort","a","b","src","alt","onClick","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wWAKmBA,Y,wBCGbC,G,wDAMJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoDRC,YAAc,WACZ,EAAKC,SAAS,CAAEC,SAAS,GAAQ,EAAKC,WApDtC,EAAKC,MAAQ,CACXC,MAAOC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAAY,MAC1DR,SAAS,GAEX,EAAKS,UAAY,IAAIC,IAAI,EAAKR,MAAMC,MAAMQ,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SACrDC,QAAQC,IAAI,EAAKN,WAPA,E,gEAYe,IAA5BO,KAAKd,MAAMC,MAAMc,QAAcD,KAAKf,a,mKAMlCE,EAAQ,G,YACPA,EAAMc,OAASD,KAAKnB,MAAMqB,e,gCACfC,IAAMC,IAAI,8BAA+B,CAAEC,QAAS,CAAEC,OAAQ,sB,OAA1EC,E,OAECP,KAAKP,UAAUe,IAAID,EAAIE,KAAKC,OAG/BZ,QAAQC,IAAI,qBACZD,QAAQC,IAAIQ,EAAIE,KAAKC,OAHvBvB,EAAMwB,KAAK,CAAEC,GAAIC,cAAUhB,KAAMU,EAAIE,KAAKC,KAAMI,MAAO,I,sBAOzDd,KAAKjB,UAAS,SAAAgC,GAAE,MAAK,CACnB/B,SAAS,EACTG,MAAM,GAAD,mBAAM4B,EAAG5B,OAAUA,OAE1B,kBAAMG,OAAOC,aAAayB,QAAQ,QAAS5B,KAAK6B,UAAU,EAAK/B,MAAMC,W,kDAIjE+B,MAAM,EAAD,IACLlB,KAAKjB,SAAS,CAAEC,SAAS,I,iJAIpB4B,EAAIO,GAAQ,IAAD,OACpBnB,KAAKjB,UACH,SAAAgC,GAAE,MAAK,CACL5B,MAAO4B,EAAG5B,MAAMQ,KAAI,SAAAC,GAAC,OAAIA,EAAEgB,KAAOA,EAAT,2BAAkBhB,GAAlB,IAAqBkB,MAAOlB,EAAEkB,MAAQK,IAAUvB,SAE3E,kBAAMN,OAAOC,aAAayB,QAAQ,QAAS5B,KAAK6B,UAAU,EAAK/B,MAAMC,a,+BAWvE,GAAIa,KAAKd,MAAMF,QACb,OACE,yBAAKoC,UAAU,oBACb,kBAAC,IAAD,CAASC,KAAK,QAAQC,MAAM,SAASF,UAAU,SAC/C,wBAAIA,UAAU,kBAAd,eAKN,IAAIjC,EAAQa,KAAKd,MAAMC,MAAMoC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEX,MAAQU,EAAEV,SAExD,OACE,yBAAKM,UAAU,YACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,kBAAiB,qCAA/B,UACA,yBAAKM,IAAI,6FAA6FC,IAAI,WAC1G,4BAAQP,UAAU,mBAAmBQ,QAAS5B,KAAKlB,aAAnD,gBAEF,yBAAKsC,UAAU,kBACZjC,EAAMQ,KAAI,SAAAe,a,GApFE/B,cAAjBC,EAEGiD,aAAe,CACpB3B,cAAe,IAiGJtB,Q,MChGAkD,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.84ad97d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\r\n\r\nclass Joke extends Component {\r\n\r\n  getColor() {\r\n    if (this.props.votes >= 15) {\r\n      return \"#4CAF50\";\r\n    } else if (this.props.votes >= 12) {\r\n        return  \"#8BC34A\"\r\n    } else if (this.props.votes >= 9) {\r\n        return \"#CDDC39\"\r\n    } else if (this.props.votes >= 6) {\r\n        return \"#FFEB3B\"\r\n    } else if (this.props.votes >= 3) {\r\n        return \"#FFC107\"\r\n    } else if (this.props.votes >=0) {\r\n        return \"#FF9800\"\r\n    } else {\r\n        return \"#F44336\"\r\n    }\r\n  }\r\n\r\n  getEmoji() {\r\n    if (this.props.votes >= 15) {\r\n      return \"em em-rolling_on_the_floor_laughing\";\r\n    } else if (this.props.votes >= 12) {\r\n        return \"em em-laughing\";\r\n    } else if (this.props.votes >=9) {\r\n        return \"em em-smiley\";\r\n    } else if (this.props.votes >= 6) {\r\n        return \"em em-slightly_smiling_face\";\r\n    } else if (this.props.votes >= 3) {\r\n        return \"em em-neutral_face\";\r\n    } else if (this.props.votes >= 0) {\r\n        return \"em em-confused\";\r\n    } else {\r\n        return \"em em-angry\"\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-buttons\">\r\n          <FaArrowUp className=\"fa-arrow-up\" onClick= {this.props.upvote} />\r\n\r\n          <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n          <FaArrowDown className=\"fa-arrow-down\" onClick={this.props.downvote} />\r\n        </div>\r\n        <div className=\"Joke-text\">\r\n          {this.props.text}\r\n        </div>\r\n        <div className=\"Joke-smiley\">\r\n        <i className={this.getEmoji()}></i>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from \"react\";\r\nimport Joke from './Joke';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './JokeList.css';\r\n\r\nimport { FaSmile } from 'react-icons/fa';\r\n\r\nclass JokeList extends Component {\r\n  // set default prop for jokes\r\n  static defaultProps = {\r\n    numJokesToGet: 10\r\n  };\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\r\n      loading: false,\r\n    };\r\n    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n    console.log(this.seenJokes);\r\n    // this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n\r\n  async getJokes() {\r\n    // load jokes\r\n    try {\r\n    const jokes = [];\r\n    while (jokes.length < this.props.numJokesToGet) {\r\n      let res = await axios.get('https://icanhazdadjoke.com/', { headers: { Accept: 'application/json' }});\r\n      // push jokes to an object so we can add things to it eg. votes, id.\r\n      if (!this.seenJokes.has(res.data.joke)) {\r\n      jokes.push({ id: uuidv4(), text: res.data.joke, votes: 0 });\r\n      } else {\r\n        console.log('Found a dublicate');\r\n        console.log(res.data.joke);\r\n      }\r\n    }\r\n    \r\n    this.setState(st => ({\r\n      loading: false,\r\n      jokes: [...st.jokes, ...jokes]\r\n    }),\r\n    () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\r\n    );\r\n    // window.localStorage.setItem('jokes', JSON.stringify(jokes))\r\n    } catch (error) {\r\n        alert(error)\r\n        this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  handleVote(id, delta) {\r\n    this.setState(\r\n      st => ({\r\n        jokes: st.jokes.map(j => j.id === id ? {...j, votes: j.votes + delta } : j)\r\n      }),\r\n      () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\r\n    )\r\n  }\r\n\r\n  // button function\r\n  handleClick = () => {\r\n    this.setState({ loading: true }, this.getJokes);\r\n  }\r\n\r\n  render() {\r\n    // Loading emoji\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"JokeList-spinner\">\r\n          <FaSmile size=\"15rem\" color=\"yellow\" className=\"spin\" />\r\n          <h1 className=\"JokeList-title\">Loading...</h1>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n\r\n    return (\r\n      <div className=\"JokeList\">\r\n        <div className=\"JokeList-sidebar\">\r\n          <h1 className=\"JokeList-title\"><span>Dad</span> Jokes</h1>\r\n          <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" alt=\"smiley\"/>\r\n          <button className=\"JokeList-getmore\" onClick={this.handleClick}>Fetch Jokes</button>\r\n        </div>\r\n        <div className=\"JokeList-jokes\">\r\n          {jokes.map(joke => (\r\n            // Joke component\r\n            <Joke\r\n              key={joke.id}\r\n              votes= {joke.votes}\r\n              text={joke.text}\r\n              upvote={() => this.handleVote(joke.id, 1)}\r\n              downvote={() => this.handleVote(joke.id, -1)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeList;\r\n\r\n// If at first you don't succeed, sky diving is not for you","import React from 'react';\nimport JokeList from './components/JokeList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}